"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun read-file-as-bytelist (V1314) (let Stream (open V1314 in) (let Byte (read-byte Stream) (let Bytes (shen.read-file-as-bytelist-help Stream Byte ()) (let Close (close Stream) (reverse Bytes))))))

(defun shen.read-file-as-bytelist-help (V1315 V1316 V1317) (cond ((= -1 V1316) V1317) (true (shen.read-file-as-bytelist-help V1315 (read-byte V1315) (cons V1316 V1317)))))

(defun read-file-as-string (V1318) (let Stream (open V1318 in) (shen.rfas-h Stream (read-byte Stream) "")))

(defun shen.rfas-h (V1319 V1320 V1321) (cond ((= -1 V1320) (do (close V1319) V1321)) (true (shen.rfas-h V1319 (read-byte V1319) (cn V1321 (n->string V1320))))))

(defun input (V1322) (eval-kl (read V1322)))

(defun input+ (V1323 V1324) (let Mono? (shen.monotype V1323) (let Input (read V1324) (if (= false (shen.typecheck Input V1323)) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V1323 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V1325) (cond ((cons? V1325) (map shen.monotype V1325)) (true (if (variable? V1325) (simple-error (cn "input+ expects a monotype: not " (shen.app V1325 "
" shen.a))) V1325))))

(defun read (V1326) (hd (shen.read-loop V1326 (read-byte V1326) ())))

(defun shen.read-loop (V1329 V1330 V1331) (cond ((= -1 V1330) (if (empty? V1331) (simple-error "error: empty stream") (compile shen.<st_input> V1331 (lambda E E)))) ((shen.terminator? V1330) (let AllBytes (append V1331 (cons V1330 ())) (let Read (compile shen.<st_input> AllBytes (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V1329 (read-byte V1329) AllBytes) Read)))) (true (shen.read-loop V1329 (read-byte V1329) (append V1331 (cons V1330 ()))))))

(defun shen.terminator? (V1332) (element? V1332 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V1333) (shen.lineread-loop (read-byte V1333) () V1333))

(defun shen.lineread-loop (V1335 V1336 V1337) (cond ((= -1 V1335) (if (empty? V1336) (simple-error "empty stream") (compile shen.<st_input> V1336 (lambda E E)))) ((= V1335 (shen.hat)) (simple-error "line read aborted")) ((element? V1335 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile shen.<st_input> V1336 (lambda E shen.nextline)) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-byte V1337) (append V1336 (cons V1335 ())) V1337) Line))) (true (shen.lineread-loop (read-byte V1337) (append V1336 (cons V1335 ())) V1337))))

(defun read-file (V1338) (let Bytelist (read-file-as-bytelist V1338) (compile shen.<st_input> Bytelist shen.read-error)))

(defun read-from-string (V1339) (let Ns (map (lambda V1313 (string->n V1313)) (explode V1339)) (compile shen.<st_input> Ns shen.read-error)))

(defun shen.read-error (V1346) (cond ((and (cons? V1346) (and (cons? (hd V1346)) (and (cons? (tl V1346)) (= () (tl (tl V1346)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V1346)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V1351 V1352) (cond ((= () V1352) "") ((= 0 V1351) "") ((cons? V1352) (cn (n->string (hd V1352)) (shen.compress-50 (- V1351 1) (tl V1352)))) (true (shen.sys-error shen.compress-50))))

(defun shen.<st_input> (V1357) (let Result (let Parse_shen.<lsb> (shen.<lsb> V1357) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<lrb> (shen.<lrb> V1357) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<lcurly> (shen.<lcurly> V1357) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<rcurly> (shen.<rcurly> V1357) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<bar> (shen.<bar> V1357) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<semicolon> (shen.<semicolon> V1357) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<colon> (shen.<colon> V1357) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<colon> (shen.<colon> V1357) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<colon> (shen.<colon> V1357) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<comma> (shen.<comma> V1357) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<comment> (shen.<comment> V1357) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<atom> (shen.<atom> V1357) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<whitespaces> (shen.<whitespaces> V1357) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_<e> (<e> V1357) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) (if (= Result (fail)) (fail) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)) Result)))

(defun shen.<lsb> (V1362) (let Result (if (and (cons? (hd V1362)) (= 91 (hd (hd V1362)))) (shen.pair (hd (shen.pair (tl (hd V1362)) (shen.hdtl V1362))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<rsb> (V1367) (let Result (if (and (cons? (hd V1367)) (= 93 (hd (hd V1367)))) (shen.pair (hd (shen.pair (tl (hd V1367)) (shen.hdtl V1367))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<lcurly> (V1372) (let Result (if (and (cons? (hd V1372)) (= 123 (hd (hd V1372)))) (shen.pair (hd (shen.pair (tl (hd V1372)) (shen.hdtl V1372))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<rcurly> (V1377) (let Result (if (and (cons? (hd V1377)) (= 125 (hd (hd V1377)))) (shen.pair (hd (shen.pair (tl (hd V1377)) (shen.hdtl V1377))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<bar> (V1382) (let Result (if (and (cons? (hd V1382)) (= 124 (hd (hd V1382)))) (shen.pair (hd (shen.pair (tl (hd V1382)) (shen.hdtl V1382))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<semicolon> (V1387) (let Result (if (and (cons? (hd V1387)) (= 59 (hd (hd V1387)))) (shen.pair (hd (shen.pair (tl (hd V1387)) (shen.hdtl V1387))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<colon> (V1392) (let Result (if (and (cons? (hd V1392)) (= 58 (hd (hd V1392)))) (shen.pair (hd (shen.pair (tl (hd V1392)) (shen.hdtl V1392))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<comma> (V1397) (let Result (if (and (cons? (hd V1397)) (= 44 (hd (hd V1397)))) (shen.pair (hd (shen.pair (tl (hd V1397)) (shen.hdtl V1397))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<equal> (V1402) (let Result (if (and (cons? (hd V1402)) (= 61 (hd (hd V1402)))) (shen.pair (hd (shen.pair (tl (hd V1402)) (shen.hdtl V1402))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<minus> (V1407) (let Result (if (and (cons? (hd V1407)) (= 45 (hd (hd V1407)))) (shen.pair (hd (shen.pair (tl (hd V1407)) (shen.hdtl V1407))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<lrb> (V1412) (let Result (if (and (cons? (hd V1412)) (= 40 (hd (hd V1412)))) (shen.pair (hd (shen.pair (tl (hd V1412)) (shen.hdtl V1412))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<rrb> (V1417) (let Result (if (and (cons? (hd V1417)) (= 41 (hd (hd V1417)))) (shen.pair (hd (shen.pair (tl (hd V1417)) (shen.hdtl V1417))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<atom> (V1422) (let Result (let Parse_shen.<str> (shen.<str> V1422) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<number> (shen.<number> V1422) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<sym> (shen.<sym> V1422) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) (if (= Result (fail)) (fail) Result)) Result)) Result)))

(defun shen.control-chars (V1423) (cond ((= () V1423) "") ((and (cons? V1423) (and (= "c" (hd V1423)) (and (cons? (tl V1423)) (= "#" (hd (tl V1423)))))) (let CodePoint (shen.code-point (tl (tl V1423))) (let AfterCodePoint (shen.after-codepoint (tl (tl V1423))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V1423) (@s (hd V1423) (shen.control-chars (tl V1423)))) (true (shen.sys-error shen.control-chars))))

(defun shen.code-point (V1426) (cond ((and (cons? V1426) (= ";" (hd V1426))) "") ((and (cons? V1426) (element? (hd V1426) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V1426) (shen.code-point (tl V1426)))) (true (simple-error (cn "code point parse error " (shen.app V1426 "
" shen.a))))))

(defun shen.after-codepoint (V1431) (cond ((= () V1431) ()) ((and (cons? V1431) (= ";" (hd V1431))) (tl V1431)) ((cons? V1431) (shen.after-codepoint (tl V1431))) (true (shen.sys-error shen.after-codepoint))))

(defun shen.decimalise (V1432) (shen.pre (reverse (shen.digits->integers V1432)) 0))

(defun shen.digits->integers (V1437) (cond ((and (cons? V1437) (= "0" (hd V1437))) (cons 0 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "1" (hd V1437))) (cons 1 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "2" (hd V1437))) (cons 2 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "3" (hd V1437))) (cons 3 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "4" (hd V1437))) (cons 4 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "5" (hd V1437))) (cons 5 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "6" (hd V1437))) (cons 6 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "7" (hd V1437))) (cons 7 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "8" (hd V1437))) (cons 8 (shen.digits->integers (tl V1437)))) ((and (cons? V1437) (= "9" (hd V1437))) (cons 9 (shen.digits->integers (tl V1437)))) (true ())))

(defun shen.<sym> (V1442) (let Result (let Parse_shen.<alpha> (shen.<alpha> V1442) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<alphanums> (V1447) (let Result (let Parse_shen.<alphanum> (shen.<alphanum> V1447) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_<e> (<e> V1447) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<alphanum> (V1452) (let Result (let Parse_shen.<alpha> (shen.<alpha> V1452) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<num> (shen.<num> V1452) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<num> (V1457) (let Result (if (cons? (hd V1457)) (let Parse_Byte (hd (hd V1457)) (if (shen.numbyte? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V1457)) (shen.hdtl V1457))) (n->string Parse_Byte)) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.numbyte? (V1462) (cond ((= 48 V1462) true) ((= 49 V1462) true) ((= 50 V1462) true) ((= 51 V1462) true) ((= 52 V1462) true) ((= 53 V1462) true) ((= 54 V1462) true) ((= 55 V1462) true) ((= 56 V1462) true) ((= 57 V1462) true) (true false)))

(defun shen.<alpha> (V1467) (let Result (if (cons? (hd V1467)) (let Parse_Byte (hd (hd V1467)) (if (shen.symbol-code? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V1467)) (shen.hdtl V1467))) (n->string Parse_Byte)) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.symbol-code? (V1468) (or (= V1468 126) (or (and (> V1468 94) (< V1468 123)) (or (and (> V1468 59) (< V1468 91)) (or (and (> V1468 41) (and (< V1468 58) (not (= V1468 44)))) (or (and (> V1468 34) (< V1468 40)) (= V1468 33)))))))

(defun shen.<str> (V1473) (let Result (let Parse_shen.<dbq> (shen.<dbq> V1473) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<dbq> (V1478) (let Result (if (cons? (hd V1478)) (let Parse_Byte (hd (hd V1478)) (if (= Parse_Byte 34) (shen.pair (hd (shen.pair (tl (hd V1478)) (shen.hdtl V1478))) Parse_Byte) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<strcontents> (V1483) (let Result (let Parse_shen.<strc> (shen.<strc> V1483) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_<e> (<e> V1483) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<byte> (V1488) (let Result (if (cons? (hd V1488)) (let Parse_Byte (hd (hd V1488)) (shen.pair (hd (shen.pair (tl (hd V1488)) (shen.hdtl V1488))) (n->string Parse_Byte))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<strc> (V1493) (let Result (if (cons? (hd V1493)) (let Parse_Byte (hd (hd V1493)) (if (not (= Parse_Byte 34)) (shen.pair (hd (shen.pair (tl (hd V1493)) (shen.hdtl V1493))) (n->string Parse_Byte)) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<number> (V1498) (let Result (let Parse_shen.<minus> (shen.<minus> V1498) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<plus> (shen.<plus> V1498) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<predigits> (shen.<predigits> V1498) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<digits> (shen.<digits> V1498) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<predigits> (shen.<predigits> V1498) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<digits> (shen.<digits> V1498) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) (if (= Result (fail)) (fail) Result)) Result)) Result)) Result)) Result)) Result)))

(defun shen.<E> (V1503) (let Result (if (and (cons? (hd V1503)) (= 101 (hd (hd V1503)))) (shen.pair (hd (shen.pair (tl (hd V1503)) (shen.hdtl V1503))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<log10> (V1508) (let Result (let Parse_shen.<minus> (shen.<minus> V1508) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<digits> (shen.<digits> V1508) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<plus> (V1513) (let Result (if (cons? (hd V1513)) (let Parse_Byte (hd (hd V1513)) (if (= Parse_Byte 43) (shen.pair (hd (shen.pair (tl (hd V1513)) (shen.hdtl V1513))) Parse_Byte) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<stop> (V1518) (let Result (if (cons? (hd V1518)) (let Parse_Byte (hd (hd V1518)) (if (= Parse_Byte 46) (shen.pair (hd (shen.pair (tl (hd V1518)) (shen.hdtl V1518))) Parse_Byte) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<predigits> (V1523) (let Result (let Parse_shen.<digits> (shen.<digits> V1523) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= Result (fail)) (let Result (let Parse_<e> (<e> V1523) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<postdigits> (V1528) (let Result (let Parse_shen.<digits> (shen.<digits> V1528) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<digits> (V1533) (let Result (let Parse_shen.<digit> (shen.<digit> V1533) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<digit> (shen.<digit> V1533) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<digit> (V1538) (let Result (if (cons? (hd V1538)) (let Parse_X (hd (hd V1538)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1538)) (shen.hdtl V1538))) (shen.byte->digit Parse_X)) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.byte->digit (V1539) (cond ((= 48 V1539) 0) ((= 49 V1539) 1) ((= 50 V1539) 2) ((= 51 V1539) 3) ((= 52 V1539) 4) ((= 53 V1539) 5) ((= 54 V1539) 6) ((= 55 V1539) 7) ((= 56 V1539) 8) ((= 57 V1539) 9) (true (shen.sys-error shen.byte->digit))))

(defun shen.pre (V1542 V1543) (cond ((= () V1542) 0) ((cons? V1542) (+ (* (shen.expt 10 V1543) (hd V1542)) (shen.pre (tl V1542) (+ V1543 1)))) (true (shen.sys-error shen.pre))))

(defun shen.post (V1546 V1547) (cond ((= () V1546) 0) ((cons? V1546) (+ (* (shen.expt 10 (- 0 V1547)) (hd V1546)) (shen.post (tl V1546) (+ V1547 1)))) (true (shen.sys-error shen.post))))

(defun shen.expt (V1550 V1551) (cond ((= 0 V1551) 1) ((> V1551 0) (* V1550 (shen.expt V1550 (- V1551 1)))) (true (* 1 (/ (shen.expt V1550 (+ V1551 1)) V1550)))))

(defun shen.<st_input1> (V1556) (let Result (let Parse_shen.<st_input> (shen.<st_input> V1556) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<st_input2> (V1561) (let Result (let Parse_shen.<st_input> (shen.<st_input> V1561) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<comment> (V1566) (let Result (let Parse_shen.<singleline> (shen.<singleline> V1566) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<multiline> (shen.<multiline> V1566) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<singleline> (V1571) (let Result (let Parse_shen.<backslash> (shen.<backslash> V1571) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<backslash> (V1576) (let Result (if (and (cons? (hd V1576)) (= 92 (hd (hd V1576)))) (shen.pair (hd (shen.pair (tl (hd V1576)) (shen.hdtl V1576))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<anysingle> (V1581) (let Result (let Parse_shen.<non-return> (shen.<non-return> V1581) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_<e> (<e> V1581) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<non-return> (V1586) (let Result (if (cons? (hd V1586)) (let Parse_X (hd (hd V1586)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V1586)) (shen.hdtl V1586))) shen.skip) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<return> (V1591) (let Result (if (cons? (hd V1591)) (let Parse_X (hd (hd V1591)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V1591)) (shen.hdtl V1591))) shen.skip) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<multiline> (V1596) (let Result (let Parse_shen.<backslash> (shen.<backslash> V1596) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))) (if (= Result (fail)) (fail) Result)))

(defun shen.<times> (V1601) (let Result (if (and (cons? (hd V1601)) (= 42 (hd (hd V1601)))) (shen.pair (hd (shen.pair (tl (hd V1601)) (shen.hdtl V1601))) shen.skip) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.<anymulti> (V1606) (let Result (let Parse_shen.<comment> (shen.<comment> V1606) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<times> (shen.<times> V1606) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= Result (fail)) (let Result (if (cons? (hd V1606)) (let Parse_X (hd (hd V1606)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V1606)) (shen.hdtl V1606))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) (if (= Result (fail)) (fail) Result)) Result)) Result)))

(defun shen.<whitespaces> (V1611) (let Result (let Parse_shen.<whitespace> (shen.<whitespace> V1611) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= Result (fail)) (let Result (let Parse_shen.<whitespace> (shen.<whitespace> V1611) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) (if (= Result (fail)) (fail) Result)) Result)))

(defun shen.<whitespace> (V1616) (let Result (if (cons? (hd V1616)) (let Parse_X (hd (hd V1616)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V1616)) (shen.hdtl V1616))) shen.skip) (fail))) (fail)) (if (= Result (fail)) (fail) Result)))

(defun shen.cons_form (V1617) (cond ((= () V1617) ()) ((and (cons? V1617) (and (cons? (tl V1617)) (and (cons? (tl (tl V1617))) (and (= () (tl (tl (tl V1617)))) (= (hd (tl V1617)) bar!))))) (cons cons (cons (hd V1617) (tl (tl V1617))))) ((cons? V1617) (cons cons (cons (hd V1617) (cons (shen.cons_form (tl V1617)) ())))) (true (shen.sys-error shen.cons_form))))

(defun shen.package-macro (V1620 V1621) (cond ((and (cons? V1620) (and (= $ (hd V1620)) (and (cons? (tl V1620)) (= () (tl (tl V1620)))))) (append (explode (hd (tl V1620))) V1621)) ((and (cons? V1620) (and (= package (hd V1620)) (and (cons? (tl V1620)) (and (= null (hd (tl V1620))) (cons? (tl (tl V1620))))))) (append (tl (tl (tl V1620))) V1621)) ((and (cons? V1620) (and (= package (hd V1620)) (and (cons? (tl V1620)) (cons? (tl (tl V1620)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V1620)))) (let Record (shen.record-exceptions ListofExceptions (hd (tl V1620))) (let PackageNameDot (intern (cn (str (hd (tl V1620))) ".")) (append (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V1620)))) V1621))))) (true (cons V1620 V1621))))

(defun shen.record-exceptions (V1622 V1623) (let CurrExceptions (trap-error (get V1623 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V1622 CurrExceptions) (put V1623 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.packageh (V1632 V1633 V1634) (cond ((cons? V1634) (cons (shen.packageh V1632 V1633 (hd V1634)) (shen.packageh V1632 V1633 (tl V1634)))) ((or (shen.sysfunc? V1634) (or (variable? V1634) (or (element? V1634 V1633) (or (shen.doubleunderline? V1634) (shen.singleunderline? V1634))))) V1634) ((and (symbol? V1634) (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) (explode V1634)))) (concat V1632 V1634)) (true V1634)))



