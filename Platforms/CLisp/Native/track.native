
"**********************************************************************************

*                           The License						                                      *

* 										                                                                  *

* The user is free to produce commercial applications with the software, to 	          *

* distribute these applications in source or binary  form, and to charge monies         *

* for them as he sees fit and in concordance with the laws of the land subject 	        *

* to the following license.							                                                *

*										                                                                    * 

* 1. The license applies to all the software and all derived software and 	            *

*    must appear on such.							                                                  *

*										                                                                    *

* 2. It is illegal to distribute the software without this license attached	            *

*    to it and use of the software implies agreement with the license as such.          *

*    It is illegal for anyone who is not the copyright holder to tamper with 	          *

*    or change the license.							                                                *

*										                                                                    *

* 3. Neither the names of Lambda Associates or the copyright holder may be used         *

*    to endorse or promote products built using the software without specific 	        *

*    prior written permission from the copyright holder.		                            *

*										                                                                    *

* 4. That possession of this license does not confer on the copyright holder 	          *

*    any special contractual obligation towards the user. That in no event 	            * 

*    shall the copyright holder be liable for any direct, indirect, incidental,        *   

*    special, exemplary or consequential damages (including but not limited             *

*    to procurement of substitute goods or services, loss of use, data, 	              * 

*    interruption), however caused and on any theory of liability, whether in	          * 

*    contract, strict liability or tort (including negligence) arising in any         	*

*    way out of the use of the software, even if advised of the possibility of         	*

*    such damage.						                                                        		* 

*										                                                                    *

* 5. It is permitted for the user to change the software, for the purpose of 	          *

*    improving performance, correcting an error, or porting to a new platform, 	        *

*    and distribute the derived version of Shen provided the resulting program 	        *

*    conforms in all respects to the Shen standard and is issued under that             * 

*    title. The user must make it clear with his distribution that he/she is 	          *

*    the author of the changes and what these changes are and why. 		                  *

*										                                                                    *

* 6. Derived versions of this software in whatever form are subject to the same         *

*    restrictions. In particular it is not permitted to make derived copies of          *

*    this software which do not conform to the Shen standard or appear under a          *

*    different title.								                                                    *

*										                                                                    *

*    It is permitted to distribute versions of Shen which incorporate libraries,        *

*    graphics or other facilities which are not part of the Shen standard.	            *

*										                                                                    *

* For an explication of this license see www.shenlanguage.org/license.htm which         *

* explains this license in full.                                                        *

*				 						                                                                    *

*****************************************************************************************

"

(DEFUN shen.f_error (V2069)
 (do
  (shen.prhush
   (cn "partial function "
    (shen.app V2069
     ";
"
     'shen.a))
   (stoutput))
  (do
   (IF
    (AND (NOT (shen.wrapper (shen.tracked? V2069)))
     (shen.wrapper (y-or-n? (cn "track " (shen.app V2069 "? " 'shen.a)))))
    (shen.track-function (ps V2069)) 'shen.ok)
   (simple-error "aborted"))))

(DEFUN shen.tracked? (V2070) (element? V2070 shen.*tracking*))

(DEFUN track (V2071) (LET ((Source (ps V2071))) (shen.track-function Source)))

(DEFUN shen.track-function (V2072)
 (COND
  ((AND (CONSP V2072)
    (AND (EQ 'defun (CAR V2072))
     (AND (CONSP (CDR V2072))
      (AND (CONSP (CDR (CDR V2072)))
       (AND (CONSP (CDR (CDR (CDR V2072))))
        (NULL (CDR (CDR (CDR (CDR V2072))))))))))
   (LET
    ((KL
      (CONS 'defun
       (CONS (CAR (CDR V2072))
        (CONS (CAR (CDR (CDR V2072)))
         (CONS
          (shen.insert-tracking-code (CAR (CDR V2072)) (CAR (CDR (CDR V2072)))
           (CAR (CDR (CDR (CDR V2072)))))
          NIL))))))
    (LET ((Ob (eval KL)))
     (LET ((Tr (set 'shen.*tracking* (CONS Ob shen.*tracking*)))) Ob))))
  (T (shen.sys-error 'shen.track-function))))

(DEFUN shen.insert-tracking-code (V2073 V2074 V2075)
 (CONS 'do
  (CONS
   (CONS 'set
    (CONS 'shen.*call*
     (CONS (CONS '+ (CONS (CONS 'value (CONS 'shen.*call* NIL)) (CONS 1 NIL)))
      NIL)))
   (CONS
    (CONS 'do
     (CONS
      (CONS 'shen.input-track
       (CONS (CONS 'value (CONS 'shen.*call* NIL))
        (CONS V2073 (CONS (shen.cons_form V2074) NIL))))
      (CONS
       (CONS 'do
        (CONS (CONS 'shen.terpri-or-read-char NIL)
         (CONS
          (CONS 'let
           (CONS 'Result
            (CONS V2075
             (CONS
              (CONS 'do
               (CONS
                (CONS 'shen.output-track
                 (CONS (CONS 'value (CONS 'shen.*call* NIL))
                  (CONS V2073 (CONS 'Result NIL))))
                (CONS
                 (CONS 'do
                  (CONS
                   (CONS 'set
                    (CONS 'shen.*call*
                     (CONS
                      (CONS '-
                       (CONS (CONS 'value (CONS 'shen.*call* NIL))
                        (CONS 1 NIL)))
                      NIL)))
                   (CONS
                    (CONS 'do
                     (CONS (CONS 'shen.terpri-or-read-char NIL)
                      (CONS 'Result NIL)))
                    NIL)))
                 NIL)))
              NIL))))
          NIL)))
       NIL)))
    NIL))))

(set 'shen.*step* 'false)

(DEFUN step (V2080)
 (COND ((EQ '+ V2080) (set 'shen.*step* 'true))
  ((EQ '- V2080) (set 'shen.*step* 'false))
  (T
   (simple-error
    "step expects a + or a -.
"))))

(DEFUN spy (V2085)
 (COND ((EQ '+ V2085) (set 'shen.*spy* 'true))
  ((EQ '- V2085) (set 'shen.*spy* 'false))
  (T
   (simple-error
    "spy expects a + or a -.
"))))

(DEFUN shen.terpri-or-read-char NIL
 (IF (shen.wrapper shen.*step*) (shen.check-byte (read-byte *stinput*))
  (nl 1)))

(DEFUN shen.check-byte (V2090)
 (COND ((shen.ABSEQUAL V2090 (shen.hat)) (simple-error "aborted")) (T 'true)))

(DEFUN shen.input-track (V2091 V2092 V2093)
 (do
  (shen.prhush
   (cn
    "
"
    (shen.app (shen.spaces V2091)
     (cn "<"
      (shen.app V2091
       (cn "> Inputs to "
        (shen.app V2092
         (cn
          " 
"
          (shen.app (shen.spaces V2091) "" 'shen.a))
         'shen.a))
       'shen.a))
     'shen.a))
   (stoutput))
  (shen.recursively-print V2093)))

(DEFUN shen.recursively-print (V2094)
 (COND ((NULL V2094) (shen.prhush " ==>" (stoutput)))
  ((CONSP V2094)
   (do (print (CAR V2094))
    (do (shen.prhush ", " (stoutput)) (shen.recursively-print (CDR V2094)))))
  (T (shen.sys-error 'shen.recursively-print))))

(DEFUN shen.spaces (V2095)
 (COND ((shen.ABSEQUAL 0 V2095) "") (T (cn " " (shen.spaces (1- V2095))))))

(DEFUN shen.output-track (V2096 V2097 V2098)
 (shen.prhush
  (cn
   "
"
   (shen.app (shen.spaces V2096)
    (cn "<"
     (shen.app V2096
      (cn "> Output from "
       (shen.app V2097
        (cn
         " 
"
         (shen.app (shen.spaces V2096) (cn "==> " (shen.app V2098 "" 'shen.s))
          'shen.a))
        'shen.a))
      'shen.a))
    'shen.a))
  (stoutput)))

(DEFUN untrack (V2099) (eval (ps V2099)))

(DEFUN profile (V2100) (shen.profile-help (ps V2100)))

(DEFUN shen.profile-help (V2105)
 (COND
  ((AND (CONSP V2105)
    (AND (EQ 'defun (CAR V2105))
     (AND (CONSP (CDR V2105))
      (AND (CONSP (CDR (CDR V2105)))
       (AND (CONSP (CDR (CDR (CDR V2105))))
        (NULL (CDR (CDR (CDR (CDR V2105))))))))))
   (LET ((G (gensym 'shen.f)))
    (LET
     ((Profile
       (CONS 'defun
        (CONS (CAR (CDR V2105))
         (CONS (CAR (CDR (CDR V2105)))
          (CONS
           (shen.profile-func (CAR (CDR V2105)) (CAR (CDR (CDR V2105)))
            (CONS G (CAR (CDR (CDR V2105)))))
           NIL))))))
     (LET
      ((Def
        (CONS 'defun
         (CONS G
          (CONS (CAR (CDR (CDR V2105)))
           (CONS (subst G (CAR (CDR V2105)) (CAR (CDR (CDR (CDR V2105)))))
            NIL))))))
      (LET ((CompileProfile (shen.eval-without-macros Profile)))
       (LET ((CompileG (shen.eval-without-macros Def))) (CAR (CDR V2105))))))))
  (T
   (simple-error
    "Cannot profile.
"))))

(DEFUN unprofile (V2106) (untrack V2106))

(DEFUN shen.profile-func (V2107 V2108 V2109)
 (CONS 'let
  (CONS 'Start
   (CONS (CONS 'get-time (CONS 'run NIL))
    (CONS
     (CONS 'let
      (CONS 'Result
       (CONS V2109
        (CONS
         (CONS 'let
          (CONS 'Finish
           (CONS
            (CONS '- (CONS (CONS 'get-time (CONS 'run NIL)) (CONS 'Start NIL)))
            (CONS
             (CONS 'let
              (CONS 'Record
               (CONS
                (CONS 'shen.put-profile
                 (CONS V2107
                  (CONS
                   (CONS '+
                    (CONS (CONS 'shen.get-profile (CONS V2107 NIL))
                     (CONS 'Finish NIL)))
                   NIL)))
                (CONS 'Result NIL))))
             NIL))))
         NIL))))
     NIL)))))

(DEFUN profile-results (V2110)
 (LET ((Results (shen.get-profile V2110)))
  (LET ((Initialise (shen.put-profile V2110 0))) (@p V2110 Results))))

(DEFUN shen.get-profile (V2111)
 (trap-error (get V2111 'profile *property-vector*) #'(LAMBDA (E) 0)))

(DEFUN shen.put-profile (V2112 V2113)
 (put V2112 'profile V2113 *property-vector*))

