
"**********************************************************************************

*                           The License						                                      *

* 										                                                                  *

* The user is free to produce commercial applications with the software, to 	          *

* distribute these applications in source or binary  form, and to charge monies         *

* for them as he sees fit and in concordance with the laws of the land subject 	        *

* to the following license.							                                                *

*										                                                                    * 

* 1. The license applies to all the software and all derived software and 	            *

*    must appear on such.							                                                  *

*										                                                                    *

* 2. It is illegal to distribute the software without this license attached	            *

*    to it and use of the software implies agreement with the license as such.          *

*    It is illegal for anyone who is not the copyright holder to tamper with 	          *

*    or change the license.							                                                *

*										                                                                    *

* 3. Neither the names of Lambda Associates or the copyright holder may be used         *

*    to endorse or promote products built using the software without specific 	        *

*    prior written permission from the copyright holder.		                            *

*										                                                                    *

* 4. That possession of this license does not confer on the copyright holder 	          *

*    any special contractual obligation towards the user. That in no event 	            * 

*    shall the copyright holder be liable for any direct, indirect, incidental,        *   

*    special, exemplary or consequential damages (including but not limited             *

*    to procurement of substitute goods or services, loss of use, data, 	              * 

*    interruption), however caused and on any theory of liability, whether in	          * 

*    contract, strict liability or tort (including negligence) arising in any         	*

*    way out of the use of the software, even if advised of the possibility of         	*

*    such damage.						                                                        		* 

*										                                                                    *

* 5. It is permitted for the user to change the software, for the purpose of 	          *

*    improving performance, correcting an error, or porting to a new platform, 	        *

*    and distribute the derived version of Shen provided the resulting program 	        *

*    conforms in all respects to the Shen standard and is issued under that             * 

*    title. The user must make it clear with his distribution that he/she is 	          *

*    the author of the changes and what these changes are and why. 		                  *

*										                                                                    *

* 6. Derived versions of this software in whatever form are subject to the same         *

*    restrictions. In particular it is not permitted to make derived copies of          *

*    this software which do not conform to the Shen standard or appear under a          *

*    different title.								                                                    *

*										                                                                    *

*    It is permitted to distribute versions of Shen which incorporate libraries,        *

*    graphics or other facilities which are not part of the Shen standard.	            *

*										                                                                    *

* For an explication of this license see www.shenlanguage.org/license.htm which         *

* explains this license in full.                                                        *

*				 						                                                                    *

*****************************************************************************************

"

(DEFUN load (V827)
 (LET
  ((Load
    (LET ((Start (get-time 'run)))
     (LET ((Result (shen.load-help shen.*tc* (read-file V827))))
      (LET ((Finish (get-time 'run)))
       (LET ((Time (shen.subtract Finish Start)))
        (LET
         ((Message
           (shen.prhush
            (cn
             "
run time: "
             (cn (str Time)
              " secs
"))
            (stoutput))))
         Result)))))))
  (LET
   ((Infs
     (IF (shen.wrapper shen.*tc*)
      (shen.prhush
       (cn
        "
typechecked in "
        (shen.app (inferences)
         " inferences
"
         'shen.a))
       (stoutput))
      'shen.skip)))
   'loaded)))

(DEFUN shen.load-help (V832 V833)
 (COND
  ((EQ 'false V832)
   (map
    #'(LAMBDA (X)
       (shen.prhush
        (shen.app (shen.eval-without-macros X)
         "
"
         'shen.s)
        (stoutput)))
    V833))
  (T
   (LET ((RemoveSynonyms (mapcan 'shen.remove-synonyms V833)))
    (LET ((Table (mapcan 'shen.typetable RemoveSynonyms)))
     (LET ((Assume (map 'shen.assumetype Table)))
      (trap-error (map 'shen.typecheck-and-load RemoveSynonyms)
       #'(LAMBDA (E) (shen.unwind-types E Table)))))))))

(DEFUN shen.remove-synonyms (V834)
 (COND
  ((AND (CONSP V834) (EQ 'shen.synonyms-help (CAR V834))) (do (eval V834) NIL))
  (T (CONS V834 NIL))))

(DEFUN shen.typecheck-and-load (V835)
 (do (nl 1) (shen.typecheck-and-evaluate V835 (gensym 'A))))

(DEFUN shen.typetable (V844)
 (COND
  ((AND (CONSP V844) (AND (EQ 'define (CAR V844)) (CONSP (CDR V844))))
   (LET ((Sig (compile 'shen.<sig+rest> (CDR (CDR V844)) NIL)))
    (IF (EQ Sig (fail))
     (simple-error
      (shen.app (CAR (CDR V844))
       " lacks a proper signature.
"
       'shen.a))
     (CONS (CONS (CAR (CDR V844)) Sig) NIL))))
  ((AND (CONSP V844)
    (AND (EQ 'defcc (CAR V844))
     (AND (CONSP (CDR V844))
      (AND (CONSP (CDR (CDR V844)))
       (AND (EQ '{ (CAR (CDR (CDR V844))))
        (AND (CONSP (CDR (CDR (CDR V844))))
         (AND (CONSP (CAR (CDR (CDR (CDR V844)))))
          (AND (EQ 'list (CAR (CAR (CDR (CDR (CDR V844))))))
           (AND (CONSP (CDR (CAR (CDR (CDR (CDR V844))))))
            (AND (NULL (CDR (CDR (CAR (CDR (CDR (CDR V844)))))))
             (AND (CONSP (CDR (CDR (CDR (CDR V844)))))
              (AND (EQ '==> (CAR (CDR (CDR (CDR (CDR V844))))))
               (AND (CONSP (CDR (CDR (CDR (CDR (CDR V844))))))
                (AND (CONSP (CDR (CDR (CDR (CDR (CDR (CDR V844)))))))
                 (EQ '}
                  (CAR (CDR (CDR (CDR (CDR (CDR (CDR V844))))))))))))))))))))))
   (CONS
    (CONS (CAR (CDR V844))
     (CONS (CAR (CDR (CDR (CDR V844))))
      (CONS '==> (CONS (CAR (CDR (CDR (CDR (CDR (CDR V844)))))) NIL))))
    NIL))
  ((AND (CONSP V844) (AND (EQ 'defcc (CAR V844)) (CONSP (CDR V844))))
   (simple-error
    (shen.app (CAR (CDR V844))
     " lacks a proper signature.
"
     'shen.a)))
  (T NIL)))

(DEFUN shen.assumetype (V845)
 (COND ((CONSP V845) (declare (CAR V845) (CDR V845)))
  (T (shen.sys-error 'shen.assumetype))))

(DEFUN shen.unwind-types (V850 V851)
 (COND ((NULL V851) (simple-error (error-to-string V850)))
  ((AND (CONSP V851) (CONSP (CAR V851)))
   (do (shen.remtype (CAR (CAR V851))) (shen.unwind-types V850 (CDR V851))))
  (T (shen.sys-error 'shen.unwind-types))))

(DEFUN shen.remtype (V852)
 (set 'shen.*signedfuncs* (shen.removetype V852 shen.*signedfuncs*)))

(DEFUN shen.removetype (V857 V858)
 (COND ((NULL V858) NIL)
  ((AND (CONSP V858)
    (AND (CONSP (CAR V858)) (shen.ABSEQUAL (CAR (CAR V858)) V857)))
   (shen.removetype (CAR (CAR V858)) (CDR V858)))
  ((CONSP V858) (CONS (CAR V858) (shen.removetype V857 (CDR V858))))
  (T (shen.sys-error 'shen.removetype))))

(DEFUN shen.<sig+rest> (V864)
 (LET
  ((Result
    (LET ((Parse_shen.<signature> (shen.<signature> V864)))
     (IF (NOT (EQ (fail) Parse_shen.<signature>))
      (LET ((Parse_<!> (<!> Parse_shen.<signature>)))
       (IF (NOT (EQ (fail) Parse_<!>))
        (shen.pair (CAR Parse_<!>) (shen.hdtl Parse_shen.<signature>)) (fail)))
      (fail)))))
  (IF (EQ Result (fail)) (fail) Result)))

(DEFUN write-to-file (V865 V866)
 (LET ((Stream (open V865 'out)))
  (LET
   ((String
     (IF (STRINGP V866)
      (shen.app V866
       "

"
       'shen.a)
      (shen.app V866
       "

"
       'shen.s))))
   (LET ((Write (pr String Stream))) (LET ((Close (close Stream))) V866)))))

